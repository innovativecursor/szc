{
  "openapi": "3.0.0",
  "info": {
    "title": "SkillzCollab API",
    "description": "API for the SkillzCollab creative collaboration platform with comprehensive Role-Based Access Control (RBAC).\n\n## Authentication\nAll endpoints require JWT Bearer token authentication.\n\n## Role-Based Access Control\n\n### Super Admin Role\n- **Full CRUD access** to brands, briefs, and tags\n- **Full CRUD access** to all users (including admin users)\n- **Read-only access** to user content (submissions, portfolios, creatives, reactions)\n\n### Admin Role\n- **Full CRUD access** to brands, briefs, and tags\n- **CRUD access** to users with role 'user'\n- **RUD access** (Read, Update, Delete) to users with role 'admin'\n- **Cannot modify** super_admin users\n- **Read-only access** to user content (submissions, portfolios, creatives, reactions)\n\n### User Role\n- **CRUD access** to their own submissions, portfolios, creatives, and reactions\n- **Read-only access** to brands, briefs, and tags\n- **Cannot modify** other users' content\n\n### Security Features\n- All routes require authentication\n- Ownership validation for user resources\n- Role-based middleware enforcement\n- Proper error responses (401, 403, 404)\n\n### Data Integrity\n- Cascade deletion: When a submission is deleted, all associated reactions are automatically removed\n- Foreign key constraints ensure referential integrity across all related entities\n- Unique constraints prevent duplicate submissions per user per brief",
    "version": "1.0.0",
    "contact": {
      "name": "SkillzCollab Team",
      "email": "support@skillzcollab.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://ec2-16-171-23-33.eu-north-1.compute.amazonaws.com/api",
      "description": "Development server"
    },
    {
      "url": "https://api.skillzcollab.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User registration",
        "description": "Register a new user account with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "email",
                  "password",
                  "firstName",
                  "lastName",
                  "role"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "example": "john_doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "Password123"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["user", "admin", "super_admin"],
                    "description": "User role (required)",
                    "example": "admin"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user with email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Account deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/oauth/google": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Initiate Google OAuth",
        "description": "Start Google OAuth authentication flow (self-registration with default 'user' role)",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Role to assign (only works for admin users, regular users get 'user' role)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["user", "admin", "super_admin"],
              "default": "user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authUrl": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string",
                          "description": "Role that will be assigned"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/oauth/google/admin": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Admin-initiated Google OAuth with role specification",
        "description": "Start Google OAuth authentication flow with role assignment (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Role to assign to the new user",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["user", "admin", "super_admin"],
              "default": "user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "authUrl": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string",
                          "description": "Role that will be assigned"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid role specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/oauth/google/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Google OAuth callback",
        "description": "Handle Google OAuth callback and authenticate user",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role to assign to the new user (if specified during OAuth initiation)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["user", "admin", "super_admin"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authResponse"
                }
              }
            }
          },
          "400": {
            "description": "OAuth error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh JWT token",
        "description": "Refresh access token using refresh token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get user profile",
        "description": "Get current authenticated user's profile",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Authentication"],
        "summary": "Update user profile",
        "description": "Update current authenticated user's profile",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string"
                  },
                  "bio": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "alternateEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "socialLinks": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/briefs": {
      "get": {
        "tags": ["Briefs"],
        "summary": "Get briefs",
        "description": "Retrieve a list of briefs with optional filtering and pagination. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "isPaid",
            "in": "query",
            "description": "Filter by paid status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "active",
                "in_progress",
                "completed",
                "cancelled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Briefs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/briefs/{id}": {
      "get": {
        "tags": ["Briefs"],
        "summary": "Get brief by ID",
        "description": "Retrieve a specific brief by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brief retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/briefWithSubmissions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Briefs"],
        "summary": "Update brief",
        "description": "Partially update an existing brief. Admin and Superadmin roles only.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 200
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 5000
                  },
                  "isPaid": {
                    "type": "boolean"
                  },
                  "prizeAmount": {
                    "type": "number",
                    "minimum": 0
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "active",
                      "in_progress",
                      "completed",
                      "cancelled"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brief partially updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brief"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/brands": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get brands",
        "description": "Retrieve a list of brands with optional filtering. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "business_field",
            "in": "query",
            "description": "Filter by business field (case-insensitive partial match)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brand_id",
            "in": "query",
            "description": "Filter by specific brand ID (UUID)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brands retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Brands"],
        "summary": "Create brand",
        "description": "Create a new brand profile (Admin and Superadmin only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "contact_email"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100
                  },
                  "contact_email": {
                    "type": "string",
                    "format": "email"
                  },
                  "registered_office": {
                    "type": "string",
                    "maxLength": 200
                  },
                  "address": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "business_field": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "logo_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "website_url": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brand"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{id}": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get brand by ID",
        "description": "Retrieve a specific brand by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brand ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brand"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Brands"],
        "summary": "Update brand",
        "description": "Partially update an existing brand profile (Admin and Superadmin only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brand ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 100
                  },
                  "contact_email": {
                    "type": "string",
                    "format": "email"
                  },
                  "registered_office": {
                    "type": "string",
                    "maxLength": 200
                  },
                  "address": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "business_field": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "logo_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "website_url": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand partially updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brand"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Brands"],
        "summary": "Delete brand",
        "description": "Delete a brand profile (Admin and Superadmin only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brand ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Brand deleted successfully"
          },
          "400": {
            "description": "Cannot delete brand with associated briefs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/brands/{id}/stats": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get brand statistics",
        "description": "Retrieve statistics for a specific brand (e.g., brief count, submission count). Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brand ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "brandId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "briefCount": {
                          "type": "number",
                          "description": "Total number of briefs"
                        },
                        "activeBriefs": {
                          "type": "number",
                          "description": "Number of active briefs"
                        },
                        "submissionCount": {
                          "type": "number",
                          "description": "Total number of submissions"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastActivity": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/brands/{id}/briefs": {
      "post": {
        "tags": ["Brands"],
        "summary": "Create a new brief for a specific brand",
        "description": "Create a new brief associated with a specific brand. Only admin users can create briefs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brand ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "deadline",
                  "budget",
                  "requirements"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 200,
                    "example": "Brand Identity Redesign"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 2000,
                    "example": "We need a complete brand identity redesign including logo, color palette, and brand guidelines."
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date",
                    "example": "2024-12-31"
                  },
                  "budget": {
                    "type": "number",
                    "minimum": 0,
                    "example": 5000
                  },
                  "requirements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "Logo design",
                      "Color palette",
                      "Brand guidelines",
                      "Mockups"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["branding", "logo", "identity"]
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    },
                    "example": ["https://example.com/brand-guidelines.pdf"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brief created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Brief created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Brief"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or brief status prevents submission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Brands"],
        "summary": "Get all briefs for a specific brand",
        "description": "Retrieve all briefs associated with a specific brand. Any authenticated user can view briefs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Brand ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Briefs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Brief"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/tags": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get tags",
        "description": "Retrieve a list of tags with optional filtering. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search tags by name or description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tags"],
        "summary": "Create tag",
        "description": "Create a new tag (Admin and Superadmin only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 200
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get tag by ID",
        "description": "Retrieve a specific tag by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tag ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Tags"],
        "summary": "Update tag",
        "description": "Partially update an existing tag (Admin and Superadmin only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tag ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 200
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag partially updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Delete tag",
        "description": "Delete a tag (Admin and Superadmin only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tag ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tag deleted successfully"
          },
          "400": {
            "description": "Cannot delete tag with associated briefs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/submissions": {
      "get": {
        "tags": ["Submissions"],
        "summary": "Get submissions",
        "description": "Retrieve a list of submissions with optional filtering. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "brief_id",
            "in": "query",
            "description": "Filter by brief ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submissions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Submissions"],
        "summary": "Create submission",
        "description": "Create a new submission. Users can only create submissions for themselves. Submissions are only allowed when brief status is 'submission'.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["brief_id", "files"],
                "properties": {
                  "brief_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the brief to submit to"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Submission description"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "filename",
                        "size",
                        "type",
                        "url",
                        "hash"
                      ],
                      "properties": {
                        "id": { "type": "string", "format": "uuid" },
                        "filename": { "type": "string" },
                        "size": { "type": "number", "minimum": 0 },
                        "type": { "type": "string" },
                        "url": { "type": "string", "format": "uri" },
                        "hash": { "type": "string" }
                      }
                    },
                    "minItems": 1,
                    "description": "Array of file objects"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Submission created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submission"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/submissions/{id}": {
      "get": {
        "tags": ["Submissions"],
        "summary": "Get submission by ID",
        "description": "Retrieve a specific submission by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Submission ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submission retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submission"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Submissions"],
        "summary": "Update submission",
        "description": "Update a submission. Users can only update their own submissions. Submissions can only be edited when brief status is 'submission'.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Submission ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Submission description"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "filename",
                        "size",
                        "type",
                        "url",
                        "hash"
                      ],
                      "properties": {
                        "id": { "type": "string", "format": "uuid" },
                        "filename": { "type": "string" },
                        "size": { "type": "number", "minimum": 0 },
                        "type": { "type": "string" },
                        "url": { "type": "string", "format": "uri" },
                        "hash": { "type": "string" }
                      }
                    },
                    "minItems": 1,
                    "description": "Array of file objects"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Submission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submission"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only update their own submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Submissions"],
        "summary": "Delete submission",
        "description": "Delete a submission. Users can only delete their own submissions. All associated reactions are automatically deleted when a submission is deleted.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Submission ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Submission deleted successfully"
          },
          "400": {
            "description": "Cannot delete submitted submission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only delete their own submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/portfolios": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get portfolios",
        "description": "Retrieve a list of portfolios with optional filtering. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolios retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Portfolios"],
        "summary": "Create portfolio",
        "description": "Create a new portfolio. Users can only create portfolios for themselves.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description"],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 200,
                    "description": "Portfolio title"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Portfolio description"
                  },
                  "is_public": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether portfolio is public"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Portfolio created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/portfolios/{id}": {
      "get": {
        "tags": ["Portfolios"],
        "summary": "Get portfolio by ID",
        "description": "Retrieve a specific portfolio by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Portfolio ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/portfolio"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Portfolio not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Portfolios"],
        "summary": "Update portfolio",
        "description": "Update a portfolio. Users can only update their own portfolios.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Portfolio ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 200,
                    "description": "Portfolio title"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Portfolio description"
                  },
                  "is_public": {
                    "type": "boolean",
                    "description": "Whether portfolio is public"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Portfolio updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/portfolio"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only update their own portfolios",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Portfolio not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Portfolios"],
        "summary": "Delete portfolio",
        "description": "Delete a portfolio. Users can only delete their own portfolios.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Portfolio ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Portfolio deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only delete their own portfolios",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Portfolio not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/creatives": {
      "get": {
        "tags": ["Creatives"],
        "summary": "Get creatives",
        "description": "Retrieve a list of creatives with optional filtering. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creatives retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Creatives"],
        "summary": "Create creative",
        "description": "Create a new creative profile. Users can only create creative profiles for themselves.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["specialization", "experience_level"],
                "properties": {
                  "specialization": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Creative specialization"
                  },
                  "experience_level": {
                    "type": "string",
                    "enum": ["beginner", "intermediate", "advanced", "expert"],
                    "description": "Experience level"
                  },
                  "bio": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Creative bio"
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of skills"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creative profile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/creative"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/creatives/{id}": {
      "get": {
        "tags": ["Creatives"],
        "summary": "Get creative by ID",
        "description": "Retrieve a specific creative profile by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Creative ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creative profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/creative"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Creative profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Creatives"],
        "summary": "Update creative",
        "description": "Update a creative profile. Users can only update their own creative profiles.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Creative ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "specialization": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Creative specialization"
                  },
                  "experience_level": {
                    "type": "string",
                    "enum": ["beginner", "intermediate", "advanced", "expert"],
                    "description": "Experience level"
                  },
                  "bio": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Creative bio"
                  },
                  "skills": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of skills"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creative profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/creative"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only update their own creative profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Creative profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Creatives"],
        "summary": "Delete creative",
        "description": "Delete a creative profile. Users can only delete their own creative profiles.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Creative ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Creative profile deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only delete their own creative profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Creative profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/reactions": {
      "get": {
        "tags": ["Reactions"],
        "summary": "Get reactions",
        "description": "Retrieve a list of reactions with optional filtering. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "submission_id",
            "in": "query",
            "description": "Filter by submission ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reactions"],
        "summary": "Create reaction",
        "description": "Create a new reaction. Users can only create reactions for themselves.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["submission_id", "reaction_type"],
                "properties": {
                  "submission_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the submission to react to"
                  },
                  "reaction_type": {
                    "type": "string",
                    "enum": ["like", "love", "wow", "sad", "angry"],
                    "description": "Type of reaction"
                  },
                  "comment": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Optional comment with reaction"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/reactions/{id}": {
      "get": {
        "tags": ["Reactions"],
        "summary": "Get reaction by ID",
        "description": "Retrieve a specific reaction by ID. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Reaction ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reactions"],
        "summary": "Update reaction",
        "description": "Update a reaction. Users can only update their own reactions.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Reaction ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reaction_type": {
                    "type": "string",
                    "enum": ["like", "love", "wow", "sad", "angry"],
                    "description": "Type of reaction"
                  },
                  "comment": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Optional comment with reaction"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only update their own reactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reactions"],
        "summary": "Delete reaction",
        "description": "Delete a reaction. Users can only delete their own reactions.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Reaction ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reaction deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only delete their own reactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get users",
        "description": "Retrieve a list of users with role-based filtering. Admin and Superadmin only.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Filter by user role",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["user", "admin", "super_admin"]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search users by username, email, or display name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by ID. Admin and Superadmin only.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update a user profile. Users can update their own profiles, Admin and Superadmin can update any user. Admin cannot modify super_admin users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 50,
                    "description": "Username"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address"
                  },
                  "displayName": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Display name"
                  },
                  "bio": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "User bio"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "maxLength": 20,
                    "description": "Phone number"
                  },
                  "alternateEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Alternate email"
                  },
                  "roles": {
                    "type": "string",
                    "enum": ["user", "admin", "super_admin"],
                    "description": "User role (Admin cannot set super_admin)"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Whether user account is active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only update their own profiles, Admin/Superadmin can update any user, or Admin cannot modify super_admin users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete a user. Admin and Superadmin only. Admin cannot delete super_admin users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Cannot delete user with associated content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin or Superadmin role required, or Admin cannot delete super_admin users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/briefs/{brief_id}/submission-status": {
      "get": {
        "tags": ["Briefs", "Submissions"],
        "summary": "Check user submission status for a brief",
        "description": "Check if the authenticated user can submit to a brief and get their existing submission if any. Users can only check their own submission status.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "brief_id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User submission status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canSubmit": {
                      "type": "boolean",
                      "description": "Whether the user can submit to this brief"
                    },
                    "briefStatus": {
                      "type": "string",
                      "description": "Current status of the brief"
                    },
                    "existingSubmission": {
                      "type": "object",
                      "nullable": true,
                      "description": "User's existing submission if any",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "description": {
                          "type": "string"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable message about submission status"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid brief_id format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/briefs/{brief_id}/submissions": {
      "get": {
        "tags": ["Briefs", "Submissions"],
        "summary": "Get submissions by brief ID",
        "description": "Retrieve all submissions for a specific brief. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "brief_id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submissions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/submission"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid brief_id format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Briefs", "Submissions"],
        "summary": "Create submission by brief ID",
        "description": "Create a new submission for a specific brief. Users can only create submissions for themselves and are limited to one submission per brief. Submissions are only allowed when brief status is 'submission'. If a user already has a submission, they should use the update endpoint instead.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "brief_id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["user_id", "files"],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the user submitting"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Submission description"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "filename",
                        "size",
                        "type",
                        "url",
                        "hash"
                      ],
                      "properties": {
                        "id": { "type": "string", "format": "uuid" },
                        "filename": { "type": "string" },
                        "size": { "type": "number", "minimum": 0 },
                        "type": { "type": "string" },
                        "url": { "type": "string", "format": "uri" },
                        "hash": { "type": "string" }
                      }
                    },
                    "minItems": 1,
                    "description": "Array of file objects"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Submission created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submission"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "409": {
            "description": "User already has a submission for this brief",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "You have already submitted work for this brief. You can edit your existing submission instead of creating a new one."
                    },
                    "existingSubmissionId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the existing submission"
                    },
                    "suggestion": {
                      "type": "string",
                      "example": "Use the update endpoint to modify your existing submission"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Brief not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },

    "/briefs/{brief_id}/submissions/{submission_id}": {
      "get": {
        "tags": ["Briefs", "Submissions"],
        "summary": "Get submission by brief ID and submission ID",
        "description": "Retrieve a specific submission for a specific brief. Read access for all authenticated users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "brief_id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "description": "Submission ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submission retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submission"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief or submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Briefs", "Submissions"],
        "summary": "Update submission by brief ID",
        "description": "Update a specific submission for a specific brief. Users can only update their own submissions. Submissions can only be edited when brief status is 'submission'.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "brief_id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "description": "Submission ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Submission description"
                  },
                  "is_finalist": {
                    "type": "boolean",
                    "description": "Whether submission is a finalist"
                  },
                  "is_winner": {
                    "type": "boolean",
                    "description": "Whether submission is the winner"
                  },
                  "likes": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Number of likes"
                  },
                  "votes": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Number of votes"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "filename",
                        "size",
                        "type",
                        "url",
                        "hash"
                      ],
                      "properties": {
                        "id": { "type": "string", "format": "uuid" },
                        "filename": { "type": "string" },
                        "size": { "type": "number", "minimum": 0 },
                        "type": { "type": "string" },
                        "url": { "type": "string", "format": "uri" },
                        "hash": { "type": "string" }
                      }
                    },
                    "minItems": 1,
                    "description": "Array of file objects"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Submission updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/submission"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only update their own submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief or submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Briefs", "Submissions"],
        "summary": "Delete submission by brief ID",
        "description": "Delete a specific submission for a specific brief. Users can only delete their own submissions. All associated reactions are automatically deleted when a submission is deleted.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "brief_id",
            "in": "path",
            "required": true,
            "description": "Brief ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "description": "Submission ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Submission deleted successfully"
          },
          "400": {
            "description": "Cannot delete submitted submission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Users can only delete their own submissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Brief or submission not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authentication. Admin and Super Admin roles required for brands, briefs, and tags management. Super Admin can manage all users, Admin can manage users with role 'user' and 'admin'. User role can only manage submissions, portfolios, creatives, and reactions."
      }
    },
    "schemas": {
      "user": {
        "$ref": "./schemas/responses.js#userResponses.user"
      },
      "userWithProfile": {
        "$ref": "./schemas/responses.js#userResponses.userWithProfile"
      },
      "authResponse": {
        "$ref": "./schemas/responses.js#userResponses.authResponse"
      },
      "brief": {
        "$ref": "./schemas/responses.js#briefResponses.brief"
      },
      "briefWithSubmissions": {
        "$ref": "./schemas/responses.js#briefResponses.briefWithSubmissions"
      },
      "submission": {
        "$ref": "./schemas/responses.js#submissionResponses.submission"
      },
      "submissionWithDetails": {
        "$ref": "./schemas/responses.js#submissionResponses.submissionWithDetails"
      },
      "portfolio": {
        "$ref": "./schemas/responses.js#portfolioResponses.portfolio"
      },
      "creative": {
        "$ref": "./schemas/responses.js#creativeResponses.creative"
      },
      "brand": {
        "$ref": "./schemas/responses.js#brandResponses.brand"
      },
      "admin": {
        "$ref": "./schemas/responses.js#adminResponses.admin"
      },
      "reaction": {
        "$ref": "./schemas/responses.js#reactionResponses.reaction"
      },
      "tag": {
        "$ref": "./schemas/responses.js#tagResponses.tag"
      },
      "success": {
        "$ref": "./schemas/responses.js#commonResponses.success"
      },
      "error": {
        "$ref": "./schemas/responses.js#commonResponses.error"
      },
      "paginated": {
        "$ref": "./schemas/responses.js#commonResponses.paginated"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Briefs",
      "description": "Project brief management endpoints"
    },
    {
      "name": "Submissions",
      "description": "Creative submission management endpoints"
    },
    {
      "name": "Portfolios",
      "description": "Creative portfolio management endpoints"
    },
    {
      "name": "Creatives",
      "description": "Creative professional management endpoints"
    },
    {
      "name": "Brands",
      "description": "Brand and company management endpoints"
    },
    {
      "name": "Admin",
      "description": "Administrative endpoints"
    },
    {
      "name": "Tags",
      "description": "Tag management endpoints"
    },
    {
      "name": "Reactions",
      "description": "Reaction management endpoints"
    }
  ]
}
